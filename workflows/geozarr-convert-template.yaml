apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: geozarr-convert
  namespace: devseed
  labels:
    app.kubernetes.io/name: geozarr-convert
    app.kubernetes.io/part-of: geozarr
    managed-by: argo
    example: "true"
spec:
  entrypoint: pipeline
  serviceAccountName: devseed
  workflowMetadata:
    labels:
      app.kubernetes.io/name: geozarr-convert
      app.kubernetes.io/part-of: geozarr
      example: "true"
  arguments:
    parameters:
      - name: image
        value: "ghcr.io/eopf-explorer/eopf-geozarr:dev"
      - name: stac_url
        value: "https://example.invalid/in.zarr"
      - name: output_zarr
        value: "/data/out.zarr"
      - name: groups
        value: ""
      - name: register_url
        value: ""
      - name: register_collection
        value: ""
      - name: register_bearer_token
        value: ""
      - name: register_href
        value: ""
      # Optional S3-compatible endpoint for direct writes (e.g., OVHcloud)
      - name: s3_endpoint
        value: "https://s3.de.io.cloud.ovh.net"
      - name: s3_region
        value: "de"
      - name: aws_addressing_style
        value: "path"
      # Optional inline AWS credentials (use only if you cannot create the K8s secret)
      - name: aws_access_key_id
        value: ""
      - name: aws_secret_access_key
        value: ""
      - name: aws_session_token
        value: ""
      - name: overwrite
        value: "false"
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 50Gi
  # Adjust PVC size per dataset if needed
  templates:
    - name: pipeline
      dag:
        tasks:
          - name: convert
            template: convert
            arguments:
              parameters:
                - { name: image, value: "{{workflow.parameters.image}}" }
                - { name: stac_url, value: "{{workflow.parameters.stac_url}}" }
                - { name: output_zarr, value: "{{workflow.parameters.output_zarr}}" }
                - { name: groups, value: "{{workflow.parameters.groups}}" }
                - { name: s3_endpoint, value: "{{workflow.parameters.s3_endpoint}}" }
                - { name: s3_region, value: "{{workflow.parameters.s3_region}}" }
                - { name: aws_addressing_style, value: "{{workflow.parameters.aws_addressing_style}}" }
                - { name: aws_access_key_id, value: "{{workflow.parameters.aws_access_key_id}}" }
                - { name: aws_secret_access_key, value: "{{workflow.parameters.aws_secret_access_key}}" }
                - { name: aws_session_token, value: "{{workflow.parameters.aws_session_token}}" }
                - { name: overwrite, value: "{{workflow.parameters.overwrite}}" }
          - name: register
            dependencies: [convert]
            template: register-stac
            arguments:
              parameters:
                - { name: image, value: "{{workflow.parameters.image}}" }
                - { name: output_zarr, value: "{{workflow.parameters.output_zarr}}" }
                - { name: register_href, value: "{{workflow.parameters.register_href}}" }
                - { name: register_url, value: "{{workflow.parameters.register_url}}" }
                - { name: register_collection, value: "{{workflow.parameters.register_collection}}" }
                - { name: register_bearer_token, value: "{{workflow.parameters.register_bearer_token}}" }
                - { name: s3_endpoint, value: "{{workflow.parameters.s3_endpoint}}" }

    - name: convert
      inputs:
        parameters:
          - name: image
          - name: stac_url
          - name: output_zarr
          - name: groups
          - name: s3_endpoint
          - name: s3_region
          - name: aws_addressing_style
          - name: aws_access_key_id
          - name: aws_secret_access_key
          - name: aws_session_token
          - name: overwrite
      container:
        image: "{{inputs.parameters.image}}"
        imagePullPolicy: Always
        resources:
          requests:
            cpu: "1"
            memory: "4Gi"
          limits:
            cpu: "2"
            memory: "8Gi"
        envFrom:
          - secretRef:
              name: ovh-s3-creds
              optional: true
        env:
          - name: AWS_DEFAULT_REGION
            value: "{{inputs.parameters.s3_region}}"
          - name: AWS_REGION
            value: "{{inputs.parameters.s3_region}}"
          - name: AWS_S3_ADDRESSING_STYLE
            value: "{{inputs.parameters.aws_addressing_style}}"
        command: [/bin/bash, -lc]
        args:
          - |
            set -euo pipefail
            # Optional S3 endpoint (for S3-compatible backends)
            if [ -n "{{inputs.parameters.s3_endpoint}}" ]; then
              export AWS_S3_ENDPOINT="{{inputs.parameters.s3_endpoint}}"
              export AWS_ENDPOINT_URL="{{inputs.parameters.s3_endpoint}}"
            fi

            # Optional inline AWS credentials (fallback if secret not present)
            if [ -n "{{inputs.parameters.aws_access_key_id}}" ]; then
              export AWS_ACCESS_KEY_ID="{{inputs.parameters.aws_access_key_id}}"
            fi
            if [ -n "{{inputs.parameters.aws_secret_access_key}}" ]; then
              export AWS_SECRET_ACCESS_KEY="{{inputs.parameters.aws_secret_access_key}}"
            fi
            if [ -n "{{inputs.parameters.aws_session_token}}" ]; then
              export AWS_SESSION_TOKEN="{{inputs.parameters.aws_session_token}}"
            fi

            # If overwrite requested, delete existing destination (S3 prefix or local dir)
            if [ "{{inputs.parameters.overwrite}}" = "true" ]; then
              echo "[convert] Overwrite=true: deleting existing destination {{inputs.parameters.output_zarr}} ..."
              DEST="{{inputs.parameters.output_zarr}}"
              env DEST="$DEST" python -c 'import os,shutil,pathlib,fsspec as F; d=os.environ.get("DEST"); S={}; ep=os.environ.get("AWS_ENDPOINT_URL"); adr=os.environ.get("AWS_S3_ADDRESSING_STYLE"); S.update({"client_kwargs":{"endpoint_url": ep}}) if ep else None; S.update({"config_kwargs":{"s3":{"addressing_style": adr}}}) if adr else None; 0 if not d else (F.filesystem("s3", **S).rm(d, recursive=True) if d.startswith("s3://") else (shutil.rmtree(d) if pathlib.Path(d).exists() else 0))' || true
            fi

            # Normalize groups: accept comma/space separated; ensure single leading '/'
            GARGS=""
            for g in $(printf '%s' "{{inputs.parameters.groups}}" | tr ',' ' '); do
              [ -z "$g" ] && continue
              g="/${g#/}"
              GARGS="$GARGS --groups $g"
            done

            # Convert using the data-model CLI directly
            set -x
            eopf-geozarr convert \
              "{{inputs.parameters.stac_url}}" \
              "{{inputs.parameters.output_zarr}}" \
              --verbose $GARGS

        volumeMounts:
          - name: data
            mountPath: /data

    - name: register-stac
      inputs:
        parameters:
          - name: image
          - name: output_zarr
          - name: register_href
          - name: register_url
          - name: register_collection
          - name: register_bearer_token
          - name: s3_endpoint
      container:
        image: "{{inputs.parameters.image}}"
        imagePullPolicy: Always
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        command: [/bin/bash, -lc]
        args:
          - |
            set -euo pipefail
            /app/scripts/register.sh \
              "{{inputs.parameters.output_zarr}}" \
              "{{inputs.parameters.register_href}}" \
              "{{inputs.parameters.register_url}}" \
              "{{inputs.parameters.register_collection}}" \
              "{{inputs.parameters.register_bearer_token}}" \
              "{{inputs.parameters.s3_endpoint}}"
        volumeMounts:
          - name: data
            mountPath: /data

  ttlStrategy:
    secondsAfterSuccess: 300
    secondsAfterFailure: 600
