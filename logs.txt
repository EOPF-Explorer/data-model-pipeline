# Tail the latest workflow logs (fallback to kubectl if the `main` container name is different)
( argo logs -n argo                                  @latest -c main -f || kubectl logs -n argo                                  $(make -s pod) -c main -f ) | sed -u 's/\r//g'
=== inputs ===
stac_url=https://objectstore.eodc.eu:2222/e05ab01a9d56408d82ac32d69a5aae2a:202505-s02msil2a/18/products/cpm_v256/S2B_MSIL2A_20250518T112119_N0511_R037_T29RLL_20250518T140519.zarr
output_zarr=/data/S2B_MSIL2A_20250518_T29RLL_geozarr.zarr
groups_raw=measurements/reflectance/r20m
validate_groups=false
=== env sanity ===
groups_norm=/measurements/reflectance/r20m
=== convert ===
+ eopf-geozarr convert https://objectstore.eodc.eu:2222/e05ab01a9d56408d82ac32d69a5aae2a:202505-s02msil2a/18/products/cpm_v256/S2B_MSIL2A_20250518T112119_N0511_R037_T29RLL_20250518T140519.zarr /data/S2B_MSIL2A_20250518_T29RLL_geozarr.zarr --verbose --groups /measurements/reflectance/r20m
Loading EOPF dataset from: https://objectstore.eodc.eu:2222/e05ab01a9d56408d82ac32d69a5aae2a:202505-s02msil2a/18/products/cpm_v256/S2B_MSIL2A_20250518T112119_N0511_R037_T29RLL_20250518T140519.zarr
Groups to convert: ['/measurements/reflectance/r20m']
CRS groups: None
Output path: /data/S2B_MSIL2A_20250518_T29RLL_geozarr.zarr
Spatial chunk size: 4096
Min dimension: 256
Tile width: 256
Loading EOPF dataset...
/usr/local/lib/python3.11/site-packages/eopf_geozarr/cli.py:145: FutureWarning: In a future version, xarray will not decode the variable 'step' into a timedelta64 dtype based on the presence of a timedelta-like 'units' attribute by default. Instead it will rely on the presence of a timedelta64 'dtype' attribute, which is now xarray's default way of encoding timedelta64 values.
To continue decoding into a timedelta64 dtype, either set `decode_timedelta=True` when opening this dataset, or add the attribute `dtype='timedelta64[ns]'` to this variable on disk.
To opt-in to future behavior, set `decode_timedelta=False`.
  dt = xr.open_datatree(
/usr/local/lib/python3.11/site-packages/eopf_geozarr/cli.py:145: FutureWarning: In a future version, xarray will not decode the variable 'step' into a timedelta64 dtype based on the presence of a timedelta-like 'units' attribute by default. Instead it will rely on the presence of a timedelta64 'dtype' attribute, which is now xarray's default way of encoding timedelta64 values.
To continue decoding into a timedelta64 dtype, either set `decode_timedelta=True` when opening this dataset, or add the attribute `dtype='timedelta64[ns]'` to this variable on disk.
To opt-in to future behavior, set `decode_timedelta=False`.
  dt = xr.open_datatree(
Loaded DataTree with 3 groups
Available groups:
  - conditions
  - measurements
  - quality
Converting to GeoZarr compliant format...
Processing group for GeoZarr compliance: /measurements/reflectance/r20m
  Processing band: b01
    Setting CRS for b01 to EPSG:32629
  Processing band: b02
    Setting CRS for b02 to EPSG:32629
  Processing band: b03
    Setting CRS for b03 to EPSG:32629
  Processing band: b04
    Setting CRS for b04 to EPSG:32629
  Processing band: b05
    Setting CRS for b05 to EPSG:32629
  Processing band: b06
    Setting CRS for b06 to EPSG:32629
  Processing band: b07
    Setting CRS for b07 to EPSG:32629
  Processing band: b11
    Setting CRS for b11 to EPSG:32629
  Processing band: b12
    Setting CRS for b12 to EPSG:32629
  Processing band: b8a
    Setting CRS for b8a to EPSG:32629
/usr/local/lib/python3.11/site-packages/zarr/api/asynchronous.py:233: ZarrUserWarning: Consolidated metadata is currently not part in the Zarr format 3 specification. It may not be supported by other zarr implementations and may change in the future.
  warnings.warn(
/usr/local/lib/python3.11/site-packages/zarr/core/dtype/npy/string.py:248: UnstableSpecificationWarning: The data type (FixedLengthUTF32(length=7, endianness='little')) does not have a Zarr V3 specification. That means that the representation of arrays saved with this data type may change without warning in a future version of Zarr Python. Arrays stored with this data type may be unreadable by other Zarr libraries. Use this data type at your own risk! Check https://github.com/zarr-developers/zarr-extensions/tree/main/data-types for the status of data type specifications for Zarr V3.
  v3_unstable_dtype_warning(self)
/usr/local/lib/python3.11/site-packages/zarr/core/dtype/npy/string.py:248: UnstableSpecificationWarning: The data type (FixedLengthUTF32(length=3, endianness='little')) does not have a Zarr V3 specification. That means that the representation of arrays saved with this data type may change without warning in a future version of Zarr Python. Arrays stored with this data type may be unreadable by other Zarr libraries. Use this data type at your own risk! Check https://github.com/zarr-developers/zarr-extensions/tree/main/data-types for the status of data type specifications for Zarr V3.
  v3_unstable_dtype_warning(self)
Processing group '/conditions' in iterative copy
Processing group '/measurements' in iterative copy
Processing group '/quality' in iterative copy
Processing group '/conditions/geometry' in iterative copy
Writing group '/conditions/geometry' with data variables to GeoZarr DataTree
/usr/local/lib/python3.11/site-packages/zarr/core/dtype/npy/string.py:248: UnstableSpecificationWarning: The data type (FixedLengthUTF32(length=3, endianness='little')) does not have a Zarr V3 specification. That means that the representation of arrays saved with this data type may change without warning in a future version of Zarr Python. Arrays stored with this data type may be unreadable by other Zarr libraries. Use this data type at your own risk! Check https://github.com/zarr-developers/zarr-extensions/tree/main/data-types for the status of data type specifications for Zarr V3.
  v3_unstable_dtype_warning(self)
/usr/local/lib/python3.11/site-packages/zarr/core/dtype/npy/string.py:248: UnstableSpecificationWarning: The data type (FixedLengthUTF32(length=7, endianness='little')) does not have a Zarr V3 specification. That means that the representation of arrays saved with this data type may change without warning in a future version of Zarr Python. Arrays stored with this data type may be unreadable by other Zarr libraries. Use this data type at your own risk! Check https://github.com/zarr-developers/zarr-extensions/tree/main/data-types for the status of data type specifications for Zarr V3.
  v3_unstable_dtype_warning(self)
Processing group '/conditions/mask' in iterative copy
Processing group '/conditions/meteorology' in iterative copy
Processing group '/measurements/reflectance' in iterative copy
Processing group '/quality/atmosphere' in iterative copy
Processing group '/quality/l2a_quicklook' in iterative copy
Processing group '/quality/mask' in iterative copy
Processing group '/quality/probability' in iterative copy
Processing group '/conditions/mask/detector_footprint' in iterative copy
Processing group '/conditions/mask/l1c_classification' in iterative copy
Processing group '/conditions/mask/l2a_classification' in iterative copy
Processing group '/conditions/meteorology/cams' in iterative copy
Writing group '/conditions/meteorology/cams' with data variables to GeoZarr DataTree
Processing group '/conditions/meteorology/ecmwf' in iterative copy
Writing group '/conditions/meteorology/ecmwf' with data variables to GeoZarr DataTree
Processing group '/measurements/reflectance/r10m' in iterative copy
Writing group '/measurements/reflectance/r10m' with data variables to GeoZarr DataTree
Processing group '/measurements/reflectance/r20m' in iterative copy
Processing '/measurements/reflectance/r20m' as GeoZarr group

=== Processing /measurements/reflectance/r20m with GeoZarr-spec compliance ===
Writing GeoZarr-spec compliant base resolution for /measurements/reflectance/r20m/0 band by band with validation
  ✅ Band b01 already exists and is valid, skipping
  ✅ Band b02 already exists and is valid, skipping
  ✅ Band b03 already exists and is valid, skipping
  ✅ Band b04 already exists and is valid, skipping
  ✅ Band b05 already exists and is valid, skipping
  ✅ Band b06 already exists and is valid, skipping
  ✅ Band b07 already exists and is valid, skipping
  ✅ Band b11 already exists and is valid, skipping
  ✅ Band b12 already exists and is valid, skipping
  ✅ Band b8a already exists and is valid, skipping
  ✅ Metadata consolidated for 10 variables
✅ Successfully processed all 10 variables for /measurements/reflectance/r20m/0
   - Wrote 0 new variables
   - Skipped 10 existing valid variables
Creating GeoZarr-spec compliant multiscales for /measurements/reflectance/r20m
Creating GeoZarr-compliant multiscales for /measurements/reflectance/r20m
Native resolution: 5490 x 5490
Native CRS: EPSG:32629
Total overview levels: 5
Overview level 0: 5490 x 5490 (scale factor: 1)
Overview level 1: 2745 x 2745 (scale factor: 2)
Overview level 2: 1372 x 1372 (scale factor: 4)
Overview level 3: 686 x 686 (scale factor: 8)
Overview level 4: 343 x 343 (scale factor: 16)
Added multiscales metadata to /measurements/reflectance/r20m
Skipping level 0 - native resolution is already in group 0

Creating overview level 1 (1:2 scale)...
Target dimensions: 2745 x 2745
  Using pyramid approach: creating level 1 from level 0
  Downsampling b01...
  Downsampling b02...
  Downsampling b03...
  Downsampling b04...
  Downsampling b05...
  Downsampling b06...
  Downsampling b07...
  Downsampling b11...
  Downsampling b12...
  Downsampling b8a...
Writing overview level 1 at /data/S2B_MSIL2A_20250518_T29RLL_geozarr.zarr/measurements/reflectance/r20m/1
/usr/local/lib/python3.11/site-packages/zarr/api/asynchronous.py:233: ZarrUserWarning: Consolidated metadata is currently not part in the Zarr format 3 specification. It may not be supported by other zarr implementations and may change in the future.
  warnings.warn(
/usr/local/lib/python3.11/site-packages/zarr/core/dtype/npy/string.py:248: UnstableSpecificationWarning: The data type (FixedLengthUTF32(length=7, endianness='little')) does not have a Zarr V3 specification. That means that the representation of arrays saved with this data type may change without warning in a future version of Zarr Python. Arrays stored with this data type may be unreadable by other Zarr libraries. Use this data type at your own risk! Check https://github.com/zarr-developers/zarr-extensions/tree/main/data-types for the status of data type specifications for Zarr V3.
  v3_unstable_dtype_warning(self)
/usr/local/lib/python3.11/site-packages/zarr/core/dtype/npy/string.py:248: UnstableSpecificationWarning: The data type (FixedLengthUTF32(length=3, endianness='little')) does not have a Zarr V3 specification. That means that the representation of arrays saved with this data type may change without warning in a future version of Zarr Python. Arrays stored with this data type may be unreadable by other Zarr libraries. Use this data type at your own risk! Check https://github.com/zarr-developers/zarr-extensions/tree/main/data-types for the status of data type specifications for Zarr V3.
  v3_unstable_dtype_warning(self)
Level 1: Successfully created in 2.57s
  ✅ Metadata consolidated for overview level 1

Creating overview level 2 (1:4 scale)...
Target dimensions: 1372 x 1372
  Using pyramid approach: creating level 2 from level 1
  Downsampling b01...
  Downsampling b02...
  Downsampling b03...
  Downsampling b04...
  Downsampling b05...
  Downsampling b06...
  Downsampling b07...
  Downsampling b11...
  Downsampling b12...
  Downsampling b8a...
Writing overview level 2 at /data/S2B_MSIL2A_20250518_T29RLL_geozarr.zarr/measurements/reflectance/r20m/2
Level 2: Successfully created in 0.76s
  ✅ Metadata consolidated for overview level 2

Creating overview level 3 (1:8 scale)...
Target dimensions: 686 x 686
  Using pyramid approach: creating level 3 from level 2
  Downsampling b01...
  Downsampling b02...
  Downsampling b03...
  Downsampling b04...
  Downsampling b05...
  Downsampling b06...
  Downsampling b07...
  Downsampling b11...
  Downsampling b12...
  Downsampling b8a...
Writing overview level 3 at /data/S2B_MSIL2A_20250518_T29RLL_geozarr.zarr/measurements/reflectance/r20m/3
Level 3: Successfully created in 1.24s
  ✅ Metadata consolidated for overview level 3

Creating overview level 4 (1:16 scale)...
Target dimensions: 343 x 343
  Using pyramid approach: creating level 4 from level 3
  Downsampling b01...
  Downsampling b02...
  Downsampling b03...
  Downsampling b04...
  Downsampling b05...
  Downsampling b06...
  Downsampling b07...
  Downsampling b11...
  Downsampling b12...
  Downsampling b8a...
Writing overview level 4 at /data/S2B_MSIL2A_20250518_T29RLL_geozarr.zarr/measurements/reflectance/r20m/4
Level 4: Successfully created in 0.13s
  ✅ Metadata consolidated for overview level 4

✅ Created 5 GeoZarr-compliant overview levels using pyramid approach
  Consolidating metadata for group /measurements/reflectance/r20m...
  ✅ Metadata consolidated
Processing group '/measurements/reflectance/r60m' in iterative copy
Writing group '/measurements/reflectance/r60m' with data variables to GeoZarr DataTree
Processing group '/quality/atmosphere/r10m' in iterative copy
Writing group '/quality/atmosphere/r10m' with data variables to GeoZarr DataTree
Processing group '/quality/atmosphere/r20m' in iterative copy
Writing group '/quality/atmosphere/r20m' with data variables to GeoZarr DataTree
Processing group '/quality/atmosphere/r60m' in iterative copy
Writing group '/quality/atmosphere/r60m' with data variables to GeoZarr DataTree
Processing group '/quality/l2a_quicklook/r10m' in iterative copy
Writing group '/quality/l2a_quicklook/r10m' with data variables to GeoZarr DataTree
Processing group '/quality/l2a_quicklook/r20m' in iterative copy
Writing group '/quality/l2a_quicklook/r20m' with data variables to GeoZarr DataTree
Processing group '/quality/l2a_quicklook/r60m' in iterative copy
Writing group '/quality/l2a_quicklook/r60m' with data variables to GeoZarr DataTree
Processing group '/quality/mask/r10m' in iterative copy
Writing group '/quality/mask/r10m' with data variables to GeoZarr DataTree
Processing group '/quality/mask/r20m' in iterative copy
Writing group '/quality/mask/r20m' with data variables to GeoZarr DataTree
Processing group '/quality/mask/r60m' in iterative copy
Writing group '/quality/mask/r60m' with data variables to GeoZarr DataTree
Processing group '/quality/probability/r20m' in iterative copy
Writing group '/quality/probability/r20m' with data variables to GeoZarr DataTree
Processing group '/conditions/mask/detector_footprint/r10m' in iterative copy
Writing group '/conditions/mask/detector_footprint/r10m' with data variables to GeoZarr DataTree
Processing group '/conditions/mask/detector_footprint/r20m' in iterative copy
Writing group '/conditions/mask/detector_footprint/r20m' with data variables to GeoZarr DataTree
Processing group '/conditions/mask/detector_footprint/r60m' in iterative copy
Writing group '/conditions/mask/detector_footprint/r60m' with data variables to GeoZarr DataTree
Processing group '/conditions/mask/l1c_classification/r60m' in iterative copy
Writing group '/conditions/mask/l1c_classification/r60m' with data variables to GeoZarr DataTree
Processing group '/conditions/mask/l2a_classification/r20m' in iterative copy
Writing group '/conditions/mask/l2a_classification/r20m' with data variables to GeoZarr DataTree
Processing group '/conditions/mask/l2a_classification/r60m' in iterative copy
Writing group '/conditions/mask/l2a_classification/r60m' with data variables to GeoZarr DataTree
Consolidating metadata at root level for consistent zarr access...
✅ Root level metadata consolidation completed
✅ Successfully converted EOPF dataset to GeoZarr format
Output saved to: /data/S2B_MSIL2A_20250518_T29RLL_geozarr.zarr
Converted DataTree has 3 groups
Converted groups:
  - conditions
  - measurements
  - quality
+ set +x
=== package artifact ===
time="2025-09-01T17:15:20.006Z" level=info msg="sub-process exited" argo=true error="<nil>"
